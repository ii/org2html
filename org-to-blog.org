#+TITLE: Org to Blogpost
#+AUTHOR: Zach Mandeville
#+DATE: 2019-05-09
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://iistyle.netlify.com/iistyle.css" />
#+HTML_HEAD: <link href="https://fonts.googleapis.com/css?family=Fira+Sans" rel="stylesheet">
#+DESCRIPTION: Explaining how we go from org to html
#+KEYWORDS:
#+LATEX_HEADER:

* Intentions
We would like to be able to turn our org-modes into visually appealing web pages.
This org-file is a meta-journey to do this, where hopefully you are reading it online, through a beautiful website.
* Methods
There are  few known methods for converting an org file into html
** org-dispatch-to-html
   This can be accessed through  [[https://orgmode.org/manual/The-export-dispatcher.html][org-export-dispatch]] , reached with =,ee=
   From here you'd select the HTML option, and can  save it as a file: =hh=
   This option can be customized, and it's by making adjustments to the org-file, with the #+KEYWORD style we are already used to.

Org dispatch has a number of output options beyond html, including pandoc, pdf and markdown set for different programs like Hugo or Reveal.
   
This is the best option for us, as we do not need to learn a new language, has good code styling built in, and can be customized for ii's specific look.
** Pandoc
   Pandoc is a tool for conversion, that has its own language and style.  It is part of =org-export-dispatch=, but can also be included as a spacemacs layer, so you can customize and run pandoc explicitly.

This tool can be v. esoteric, and it is a Domain Specific Language, and so I think it is better to invest time into making the basic org-dispatch work then trying to understand pandoc and _then_ understand how org works with it.
** Reveal.JS
  Reveal is a library for creating slide presentations and slide-style interactive websites.  It has a nice, professional style by default, but it is not meant for long posts. It's good for an org-file made of keywords and snippets, but not one written with a blog audience in mind.  This is a good thing to explore later, but not for the present purpose.
* Flow and Assumptions
I am trying out an export for a basic static website, where each org-file becomes its own html page, within a folder called =org= (knowing we can change the folder later).  This means the site will need to have an index, leading to the different selections, but would need to be built separately (and likely could be done with a simple script, and not as a part of org).

If we decide we want this to be a blog, and maybe part of our wordpress site, we would need to revisit this flow to make something easy enough for wordpress to consume. I am not quite sure our setup on that (whether wordpress wants markdown entered into their CMS, or whether we could post to a file and wordpress knows to grab everything from that.)

That is out of scope for this post though.

* Goals for the Web template
** DONE Export includes custom CSS, so it is a nice font and bg-color
   CLOSED: [2019-05-09 Thu 14:32]
   You can do this by adding a link to your stylesheet with =#+HTML_HEAD=
   
   #+BEGIN_EXAMPLE elisp
   #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://iistyle.netlify.com/iistyle.css" />
   #+END_EXAMPLE
   
   We created a netlify page with a stylesheet, so we could reference it externally.
   This also keeps the existing styles that come with it, but our stylesheet is placed below the built-in styling, which means our tags have priority.   
   
   This enables us to override their styling by redefining their classes.  See [[https://orgmode.org/manual/CSS-support.html#CSS-support][The Org Manual Page on CSS Support]] for more.
** DONE code blocks are presented nicely withikn the file
   CLOSED: [2019-05-09 Thu 14:35]
   
   This is done automatically by their export, and I like the style they ahve for it.  The most I'd do, right now, is make the background nearblack instead of transparent.
** TODO todos show up nikcely in the file
** TODO ability to explicitly set the output folder and file.
** TODO Table of Contents is in a sidebar (similar to hackMD)
** TODO internal links work (the various subheadings, or linking a line in a doc.)
** TODO A template is made that we can load during the export that includes link to custom css
* Sample Work
** Heading 2!
*** Heading 3!
** TODO Figure out how to export result code blocks
** TODO figure out how to insert custom css 
** TODO add custom css to some file we can reach over ionternet  (netlify?)
** TODO figure out how to make your own template that includes css
** TODO A thing
** DONE another thing
   CLOSED: [2019-05-09 Thu 10:34]
** TODO a scheduled thing
   DEADLINE: <2019-05-10 Fri> SCHEDULED: <2019-05-09 Thu>
** Source code blocks
   #+NAME: Some Shell Scripts
   #+BEGIN_SRC shell :results output :exports both
  pwd
  echo "I am Cool!" 
   #+END_SRC

   #+RESULTS: Some Shell Scripts
   : /home/zz/ii/tooling/group-tooling
   : I am Cool!
   
   And here is some javascript!
   
   #+NAME: Javascript goodness :results output code :exports both
   #+BEGIN_SRC js 
     function selfAffirmation (self) {
       let selfAffirmation = `I, ${self} am great.  And I, ${self} am powerful!`
       console.log(selfAffirmation)
     }
     selfAffirmation('Zach')
   #+END_SRC

   #+RESULTS: Javascript goodness :results output code :exports both
   : I, Zach am great.  And I, Zach am powerful!
   : undefined

   #+RESULTS: Javascript goodness :results output raw :exports both
   : I, Zach am great.  And I, Zach am powerful!
   : undefined

   #+RESULTS: Javascript goodness :results output list :exports both
   : I, Zach am great.  And I, Zach am powerful!
   : undefined


** A Nice Table
   
  | Thing      | Coolness | location    | something | else   |
  |------------+----------+-------------+-----------+--------|
  | chair      | low      | living room | box       | sunset |
  | video game | high     | rec room    | flower    | plant  |

* Working with org-dispatch
   This file has a built-in styling for TODO's and code blocks.  The name of the block is not included.  It also doesn't seem to do the results
   
   It looks like we could add a css file simply by including a link to it within our head and inserting that using a head keyword.
   We could also set up an html template that we prepend to the org mode upon being ready to export.
   

* Our iistyle
  This is the CSS sheet we reference to style our pages.
#+BEGIN_SRC css :tangle iistyle.css
  /*
  ii styling for orgs exported to html!
  ,*/

  /*
  let's use variables, to quickly change color and font later.
  ,*/
  :root {
    --primary_bg: aliceblue;
    --primary_color: #111111;
    --primary_font: 'Fira Sans', sans-serif;  /* currently requires dependency to google fonts, but this is an open source font.*/
    --font-size: 24px;
  }


  body, html {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
  }

  body {
    background: var(--primary_bg);
    color: var(--primary_color);
    font-family: var(--primary_font);
    font-size: var(--font-size);
  }

  div#content {
    width: 70%;
    padding: 3em;
  }
#+END_SRC

